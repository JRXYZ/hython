-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.4 from src/Small.y
-----------------------------------------------------------------------------


terminal indent is unused
terminal dedent is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseTokens -> stmts                        (0)
	stmts -> stmts newline stmt                        (1)
	stmts -> stmts newline                             (2)
	stmts -> stmt                                      (3)
	stmts ->                                           (4)
	stmt -> while_stmt                                 (5)
	stmt -> literal                                    (6)
	while_stmt -> while literal ":" suite              (7)
	suite -> newline LBRACE stmts RBRACE               (8)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	literal        { L.Literal $$ }
	newline        { L.Newline }
	":"            { L.Punctuation ":" }
	indent         { L.Indent }
	dedent         { L.Dedent }
	LBRACE         { L.Punctuation "{" }
	RBRACE         { L.Punctuation "}" }
	while          { L.Keyword "while" }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseTokens rule  0
	stmts           rules 1, 2, 3, 4
	stmt            rules 5, 6
	while_stmt      rule  7
	suite           rule  8

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	literal        shift, and enter state 5
	newline        reduce using rule 4
	while          shift, and enter state 6
	%eof           reduce using rule 4

	stmts          goto state 7
	stmt           goto state 3
	while_stmt     goto state 4

State 1


	literal        shift, and enter state 5
	while          shift, and enter state 6

	stmts          goto state 2
	stmt           goto state 3
	while_stmt     goto state 4

State 2

	stmts -> stmts . newline stmt                       (rule 1)
	stmts -> stmts . newline                            (rule 2)

	newline        shift, and enter state 8


State 3

	stmts -> stmt .                                     (rule 3)

	newline        reduce using rule 3
	RBRACE         reduce using rule 3
	%eof           reduce using rule 3


State 4

	stmt -> while_stmt .                                (rule 5)

	newline        reduce using rule 5
	RBRACE         reduce using rule 5
	%eof           reduce using rule 5


State 5

	stmt -> literal .                                   (rule 6)

	newline        reduce using rule 6
	RBRACE         reduce using rule 6
	%eof           reduce using rule 6


State 6

	while_stmt -> while . literal ":" suite             (rule 7)

	literal        shift, and enter state 9


State 7

	%start_parseTokens -> stmts .                       (rule 0)
	stmts -> stmts . newline stmt                       (rule 1)
	stmts -> stmts . newline                            (rule 2)

	newline        shift, and enter state 8
	%eof           accept


State 8

	stmts -> stmts newline . stmt                       (rule 1)
	stmts -> stmts newline .                            (rule 2)

	literal        shift, and enter state 5
	newline        reduce using rule 2
	RBRACE         reduce using rule 2
	while          shift, and enter state 6
	%eof           reduce using rule 2

	stmt           goto state 11
	while_stmt     goto state 4

State 9

	while_stmt -> while literal . ":" suite             (rule 7)

	":"            shift, and enter state 10


State 10

	while_stmt -> while literal ":" . suite             (rule 7)

	newline        shift, and enter state 13

	suite          goto state 12

State 11

	stmts -> stmts newline stmt .                       (rule 1)

	newline        reduce using rule 1
	RBRACE         reduce using rule 1
	%eof           reduce using rule 1


State 12

	while_stmt -> while literal ":" suite .             (rule 7)

	newline        reduce using rule 7
	RBRACE         reduce using rule 7
	%eof           reduce using rule 7


State 13

	suite -> newline . LBRACE stmts RBRACE              (rule 8)

	LBRACE         shift, and enter state 14


State 14

	suite -> newline LBRACE . stmts RBRACE              (rule 8)

	literal        shift, and enter state 5
	newline        reduce using rule 4
	RBRACE         reduce using rule 4
	while          shift, and enter state 6

	stmts          goto state 15
	stmt           goto state 3
	while_stmt     goto state 4

State 15

	stmts -> stmts . newline stmt                       (rule 1)
	stmts -> stmts . newline                            (rule 2)
	suite -> newline LBRACE stmts . RBRACE              (rule 8)

	newline        shift, and enter state 8
	RBRACE         shift, and enter state 16


State 16

	suite -> newline LBRACE stmts RBRACE .              (rule 8)

	newline        reduce using rule 8
	RBRACE         reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 9
Number of terminals: 8
Number of non-terminals: 5
Number of states: 17
